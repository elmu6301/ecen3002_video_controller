
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module em_project(

	//////////// CLOCK //////////
	// input 		          		CLOCK2_50,
	// input 		          		CLOCK3_50,
	// input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	// //////////// SW //////////
	input 		     [9:0]		SW,

	// //////////// LED //////////
	output		     [9:0]		LEDR,

	// //////////// Seg7 //////////
	// output		     [6:0]		HEX0,
	// output		     [6:0]		HEX1,
	// output		     [6:0]		HEX2,
	// output		     [6:0]		HEX3,
	// output		     [6:0]		HEX4,
	// output		     [6:0]		HEX5,

	// //////////// SDRAM //////////
	// output		    [12:0]		DRAM_ADDR,
	// output		     [1:0]		DRAM_BA,
	// output		          		DRAM_CAS_N,
	// output		          		DRAM_CKE,
	// output		          		DRAM_CLK,
	// output		          		DRAM_CS_N,
	// inout 		    [15:0]		DRAM_DQ,
	// output		          		DRAM_LDQM,
	// output		          		DRAM_RAS_N,
	// output		          		DRAM_UDQM,
	// output		          		DRAM_WE_N,

	// //////////// Video-In //////////
	// input 		          		TD_CLK27,
	// input 		     [7:0]		TD_DATA,
	// input 		          		TD_HS,
	// output		          		TD_RESET_N,
	// input 		          		TD_VS,

	// //////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS //,

	// //////////// Audio //////////
	// input 		          		AUD_ADCDAT,
	// inout 		          		AUD_ADCLRCK,
	// inout 		          		AUD_BCLK,
	// output		          		AUD_DACDAT,
	// inout 		          		AUD_DACLRCK,
	// output		          		AUD_XCK,

	// //////////// PS2 //////////
	// inout 		          		PS2_CLK,
	// inout 		          		PS2_CLK2,
	// inout 		          		PS2_DAT,
	// inout 		          		PS2_DAT2,

	// //////////// ADC //////////
	// output		          		ADC_CONVST,
	// output		          		ADC_DIN,
	// input 		          		ADC_DOUT,
	// output		          		ADC_SCLK,

	// //////////// I2C for Audio and Video-In //////////
	// output		          		FPGA_I2C_SCLK,
	// inout 		          		FPGA_I2C_SDAT,

	// //////////// IR //////////
	// input 		          		IRDA_RXD,
	// output		          		IRDA_TXD

	// //////////// TEST OUTPUTS //////////
	// output                          pll_clk, 
	// output 							pll_locked, 
	// output                          horz_sync, 
	// output                          vert_sync,
	// output 							[11:0] horz_count,
	// output 							[11:0] vert_count,
	// output							v_on,
	// output                          reset_P
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

//Reset trigger
logic ext_reset_n; 
//Reset output lines
logic reset_p, reset_n;  

//PLL output lines
logic rfr_clk, locked;

//VTC output lines
logic h_sync; 
logic [11:0] pixel_count; 
logic v_sync; 
logic [11:0] line_count; 
logic video_on; 


//Pixel Generator output lines
logic [7:0] red, green, blue; 

logic [3:0] bar_cnt; 

//=======================================================
//  Assignment declarations
//=======================================================

//Resets
assign reset_p = 1'b0; //active high for the pll
assign ext_reset_n = (~SW[0]) & locked; //active low + wait till the pll is going before running

//VGA assignments
assign VGA_BLANK_N = 1'b1; 
assign VGA_SYNC_N = 1'b0; 
assign VGA_CLK = rfr_clk; 
assign VGA_HS = h_sync; 
assign VGA_VS = v_sync; 

assign VGA_R = red; 
assign VGA_G = green; 
assign VGA_B = blue; 

//PLL Test outputs 
// assign reset_P = reset_p; 
// assign pll_clk = rfr_clk; 
// assign pll_locked = locked; 

// //VTC Test outputs
// assign horz_sync = h_sync; 
// assign vert_sync = v_sync; 
// assign horz_count = pixel_count; 
// assign vert_count = line_count; 
// assign v_on = video_on; 

//Assign LED 
assign LEDR[0] = ext_reset_n; //Indicates not in reset
// assign LEDR[2:1] = SW[2:1]; //Indicates if boxes are  in move states
// assign LEDR[8:7] = SW[8:7]; //Indicates if the box should change color
// assign LEDR[9] = SW[9]; //Indicates if the speed should be slow (0) or fast(1)
assign LEDR[8:1] = 7'b0; 
`ifdef highres
assign LEDR[9] = 1'b1; 
`else
assign LEDR[9] = 1'b0;
`endif
//=======================================================
//  Module declarations
//=======================================================

//Reset Module
reset RESET(.clock(rfr_clk),
			.ext_reset_n(ext_reset_n),
			.lock(1'b1), 
			.reset_n(reset_n)
			); 

//PLL Clock Source Selection
`ifdef highres 
   //1080p - 148.5 MHz Clock Module
	refresh_pll_1080p REFRESH_PLL_CLK_1080p(.refclk(CLOCK_50), .rst(reset_p), .outclk_0(rfr_clk), .locked(locked)); 
`else
    //720p - 74.25 MHz Clock Module
	refresh_pll_720p REFRESH_PLL_CLK_720p(.refclk(CLOCK_50), .rst(reset_p), .outclk_0(rfr_clk), .locked(locked)); 

`endif
			

//Video Controller Module
vtc VGA_VTC(.rfr_clk(rfr_clk),
			.reset_n(reset_n),
			.h_sync(h_sync),
			.h_count(pixel_count),
			.v_sync(v_sync),
			.v_count(line_count),
			.video_on(video_on)
			); 

//Pixel Generator Module
pixel_gen PIXEL_GEN(.rfr_clk(rfr_clk),
					.reset_n(reset_n),
					.video_on(video_on), 
					.pixel_cnt(pixel_count),
					.line_cnt(line_count),
					.h_sync(h_sync),
					.v_sync(v_sync), 
					
					//Phase 2 Inputs
					.dColor_box1(SW[8]),
					.move_box1(SW[1]),
					.dColor_box2(SW[7]),
					.move_box2(SW[2]),
					.move_dir(~KEY[3:0]),
					.speed(SW[9]),

					.p_red(red),
					.p_green(green),
					.p_blue(blue)
					); 

//=======================================================
//  Structural coding
//=======================================================


endmodule
